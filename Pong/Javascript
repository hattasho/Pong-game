// Obtém o elemento <canvas> do HTML e seu contexto de desenho 2D
const canvas = document.getElementById('pongCanvas');
const ctx = canvas.getContext('2d');

// Configurações gerais do jogo
const paddleWidth = 10, paddleHeight = 100, ballSize = 10, speed = 5;
let isDragging = false, currentMouseY = 0;  // Variáveis para controle da interação do mouse

// Definição dos objetos do jogo: a paleta do jogador, a paleta do AI e a bola
const playerPaddle = { 
    x: 0, // A paleta do jogador fica na borda esquerda
    y: canvas.height / 2 - paddleHeight / 2, // Verticalmente centralizada
    width: paddleWidth, 
    height: paddleHeight, 
    color: 'white' // Cor branca
};

const aiPaddle = { 
    x: canvas.width - paddleWidth, // A paleta do AI fica na borda direita
    y: canvas.height / 2 - paddleHeight / 2, // Verticalmente centralizada
    width: paddleWidth, 
    height: paddleHeight, 
    color: 'white' // Cor branca
};

const ball = { 
    x: canvas.width / 2, // Inicia no centro da tela
    y: canvas.height / 2, // Inicia no centro da tela
    radius: ballSize / 2, // Raio da bola
    dx: speed, // Velocidade da bola no eixo X
    dy: speed, // Velocidade da bola no eixo Y
    color: 'white' // Cor branca
};

// Função para desenhar objetos (paletas e bola) na tela
function draw(obj) {
    ctx.fillStyle = obj.color; // Define a cor de preenchimento do objeto

    // Se o objeto for a bola, desenha um círculo
    if (obj.radius) {
        ctx.beginPath();
        ctx.arc(obj.x, obj.y, obj.radius, 0, Math.PI * 2); // Desenha a bola
    } 
    // Caso contrário, desenha um retângulo (as paletas)
    else {
        ctx.fillRect(obj.x, obj.y, obj.width, obj.height); // Desenha as paletas
    }

    ctx.fill(); // Preenche o objeto com a cor especificada
}

// Função de atualização do estado do jogo
function update() {
    // Movimenta a bola com base na velocidade (dx, dy)
    ball.x += ball.dx; 
    ball.y += ball.dy;

    // Verifica colisão da bola com a parede superior ou inferior
    if (ball.y - ball.radius < 0 || ball.y + ball.radius > canvas.height) {
        ball.dy *= -1; // Inverte a direção vertical da bola
    }

    // Verifica colisão da bola com a paleta do jogador ou do AI
    if ((ball.x - ball.radius < playerPaddle.x + playerPaddle.width && ball.y > playerPaddle.y && ball.y < playerPaddle.y + playerPaddle.height) || 
        (ball.x + ball.radius > aiPaddle.x && ball.y > aiPaddle.y && ball.y < aiPaddle.y + aiPaddle.height)) {
        ball.dx *= -1; // Inverte a direção horizontal da bola
    }

    // Se a bola passar das bordas laterais, reinicia no centro
    if (ball.x - ball.radius < 0 || ball.x + ball.radius > canvas.width) {
        ball.x = canvas.width / 2; // Reseta a posição horizontal
        ball.y = canvas.height / 2; // Reseta a posição vertical
        ball.dx *= -1; // Inverte a direção horizontal
    }

    // Movimenta a paleta do jogador com base no mouse, mantendo dentro dos limites do canvas
    if (isDragging) {
        playerPaddle.y = Math.max(Math.min(currentMouseY - paddleHeight / 2, canvas.height - paddleHeight), 0);
    }

    // Movimenta a paleta do AI de forma simples, acompanhando a posição vertical da bola
    aiPaddle.y = Math.max(Math.min(ball.y - aiPaddle.height / 2, canvas.height - paddleHeight), 0);
}

// Eventos de arrastar para mover a paleta do jogador com o mouse
canvas.addEventListener('mousedown', (e) => {
    const rect = canvas.getBoundingClientRect(); // Obtém a posição do canvas na página

    // Verifica se o clique foi na área da paleta do jogador
    if (e.clientX - rect.left < playerPaddle.x + playerPaddle.width && 
        e.clientY - rect.top > playerPaddle.y && 
        e.clientY - rect.top < playerPaddle.y + playerPaddle.height) {
        isDragging = true; // Ativa o modo de arrastar
        currentMouseY = e.clientY - rect.top; // Atualiza a posição vertical do mouse
    }
});

// Evento para parar de arrastar quando o botão do mouse é liberado
canvas.addEventListener('mouseup', () => isDragging = false);

// Evento para atualizar a posição vertical do mouse enquanto se arrasta
canvas.addEventListener('mousemove', (e) => {
    if (isDragging) {
        currentMouseY = e.clientY - canvas.getBoundingClientRect().top; // Atualiza a posição do mouse
    }
});

// Função principal do jogo que roda em loop
function gameLoop() {
    ctx.clearRect(0, 0, canvas.width, canvas.height); // Limpa o canvas para redesenhar

    // Desenha a paleta do jogador, a paleta do AI e a bola
    draw(playerPaddle); 
    draw(aiPaddle); 
    draw(ball);

    update(); // Atualiza o estado do jogo

    // Chama o gameLoop de forma contínua (taxa de frames)
    requestAnimationFrame(gameLoop);
}

// Inicia o loop do jogo
gameLoop();
